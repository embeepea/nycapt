#! /usr/bin/env node
//-*- mode: js2;-*-

var databaseUrl = "test";
var collections = ["nycapt_postings", "nycapt_edits"];
var mongodb = require('mongodb');
var _ = require('underscore');
var sprintf = require('sprintf').sprintf;
var fs = require('fs');
var db = require("mongojs").connect(databaseUrl, collections);

var load_file = "listings.json";

var importDate = Number(((new Date()).getTime()/1000).toFixed(0)); // seconds since the epoch

/*
 * `withPidManager` calls its callback with an object having the following properties which represent the
 *     current state of the database:
 * 
 *              `postingIDByPid`: an object which maps Pids (the object's properties) to PostingIDs (property values)
 *              `pidByPostingID`: ab object which maps PostingIDs (the object's properties) to Pids (property values)
 *     `generatePid(postingID)` : a function that creates and returns a unique Pid for a postingID; this function
 *                                does not modify any postings --- it simply returns the Pid value
 */
function withPidManager(callback) {
    var maxPid = 0,
        postingIDByPid = {},
        editByPostingID = {};
    db.nycapt_edits.find(function(err,edits) {
        _.each(edits, function(edit) {
            postingIDByPid[edit.Pid] = edit.PostingID;
            editByPostingID[edit.PostingID] = edit;
            if (edit.Pid > maxPid) {
                maxPid = edit.Pid;
            }
        });
        callback({
            'postingIDByPid' : postingIDByPid,
            'editByPostingID' : editByPostingID,
            'generatePid'    : function(postingID) {
                ++maxPid;
                postingIDByPid[maxPid] = postingID;
                return maxPid;
            }
        });
    });
}

function loadpostings(postings, pidManager) {
    var nPostings = postings.length,
        nDone = 0;
    function postingDone() {
        ++nDone;
        if (nDone >= nPostings) {
            db.close();
            console.log(sprintf('loaded %1d postings from file %s', nDone, load_file));
        }
    }
    _.each(postings, function(posting) {
        db.nycapt_postings.find({"PostingID": posting.PostingID}, function(err, result) {
            var pid,
                isnew = false,
                postedDateModified = false,
                hadEdits = false;
            if (result.length === 1) {
                // a posting with this ID is already in the database; get its pid
                pid = pidManager.editByPostingID[posting.PostingID].Pid;
                // and determine how its PostedDate has changed, if it has
                if (posting.PostedDate > result[0].PostedDate) {
                    postedDateModified = "newer";
                } else if (posting.PostedDate < result[0].PostedDate) {
                    postedDateModified = "OLDER [!!??]";
                }
            } else if (result.length === 0) {
                // this is a new posting; create a new edit doc for it, if we don't already have one
                isnew = true;

                var edit = pidManager.editByPostingID[posting.PostingID];
                if (edit !== undefined) {
                    hadEdits = true;
                    pid = edit.Pid;
                } else {
                    pid = pidManager.generatePid(posting.PostingID);
console.log('saving edit');
console.log({
                        'Pid'        : pid,
                        'PostingID'  : posting.PostingID,
                        'ImportDate' : importDate,
                        'Tags'       : ["new"]
                    });
                    db.nycapt_edits.save({
                        'Pid'        : pid,
                        'PostingID'  : posting.PostingID,
                        'ImportDate' : importDate,
                        'Tags'       : ["new"]
                    }, function(err,value) {
                        if (err) {
                            console.log(sprintf("error saving edits for id=%s", posting.PostingID));
                        }
                    });
                }
            } else {
                // print error!
                console.log('error!');
                console.log(result.length);
                console.log(result);
                postingDone();
                return;
            }
            db.nycapt_postings.update({"PostingID": posting.PostingID},
                               posting,
                               { upsert : true },
                               function(err) {
                                   if (isnew) {
                                       console.log(sprintf("saved new posting pid=%1d [craigslist id=%s]%s",
                                                           pid, posting.PostingID,
                                                           hadEdits ? " (re-instating of previous posting)" : ""));
                                   } else {
                                       if (postedDateModified) {
                                           console.log(sprintf("updated posting pid=%1d [craigslist id=%s] with %s PostedDate",
                                                               pid, posting.PostingID, postedDateModified));
                                       } else {
                                           console.log(sprintf("refreshed posting pid=%1d [craigslist id=%s]", pid, posting.PostingID));
                                       }
                                   }
                                   postingDone();
                               });
        });

    });
}

fs.readFile(load_file, 'utf8', function (err, data) {
    if (err) {
        console.log('Error: ' + err);
        return;
    }
    withPidManager(function(pidManager) {
        loadpostings(JSON.parse(data), pidManager);
    });
});
